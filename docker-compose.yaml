services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --loglevel warning
    volumes:
      - ./docker-volumes/cache:/data
  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - ./docker-volumes/data:/data/db
  mysql:
    container_name: mysql_container
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: trains_pass
      MYSQL_DATABASE: trains_auth
      MYSQL_USER: trains
      MYSQL_PASSWORD: trains_pass
    ports:
      - '3308:3306'
    volumes:
      - ./docker-volumes/mysql:/var/lib/mysql
  postgres:
    container_name: postgres_container
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: trains_auth
      POSTGRES_USER: trains
      POSTGRES_PASSWORD: trains_pass
    ports:
      - '5430:5430'
    volumes:
      - ./docker-volumes/postgres:/var/lib/postgresql
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    environment:
      POSTGRES_DB: trains_auth
      POSTGRES_USER: trains
      POSTGRES_PASSWORD: trains_pass
    ports:
      # AMQP protocol port
      - '5672:5672'
      # management UI - rabbitmq dashboard
      - '15672:15672'
    # tego nie potrzebujemy w tym projekcie
    volumes:
      - ./docker-volumes/postgres:/var/lib/rabbitmq
  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.3
    restart: always
    environment:
      ES_JAVA_OPTS: '-Xms1g -Xmx1g'
      bootstrap.memory_lock: 'true'
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: 'true'
      xpack.security.authc.api_key.enabled: 'true'
      xpack.monitoring.collection.enabled: 'true'
      xpack.security.enrollment.enabled: 'true'
      xpack.security.authc.token.enabled: 'true'
      ELASTIC_PASSWORD: admin1234
    ports:
      - '9200:9200'
      # for multiple-node
      # - '9300:9300'
    volumes:
      - ./docker-volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.13.3
    restart: always
    environment:
        ELASTICSEARCH_HOSTS: '["http://elasticsearch_container:9200"]'
        ELASTICSEARCH_USERNAME: kibana_system
        ELASTICSEARCH_PASSWORD: kibana
        ELASTICSEARCH_SERVICEACCOUNT_TOKEN: 'AAEAAWVsYXN0aWMva2liYW5hL3RyYWlucy1raWJhbmE6eEVLTVdoQTBTUnFWdGZiWGoxU1IyQQ'
        XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS: '["http://elasticsearch_container:9200"]'
    ports:
      - '5601:5601'
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - elastic
    depends_on:
      - elasticsearch

networks: 
  elastic:
    name: elastic